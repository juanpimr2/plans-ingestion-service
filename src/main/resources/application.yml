spring:
  main:
    web-application-type: servlet
  datasource:
    url: jdbc:postgresql://localhost:5432/fever
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
fever:
  provider:
    base-url: https://provider.code-challenge.feverup.com/api/events
    # Conexión agresiva: si la red está mal, cortamos rápido
    connect-timeout-ms: 250
    # Límite duro del socket; dejarlo > fetch-timeout-ms para que mande el timeout de negocio
    read-timeout-ms: 1000
    # Timeout end-to-end de la llamada al provider (lo usa WebClientProviderClient)
    fetch-timeout-ms: 600

  search:
    # Presupuesto total de warm-up (bloqueante si DB vacía; no-bloqueante si ya hay datos)
    warmup-ms: 800

resilience4j:
  retry:
    instances:
      provider:
        # Para no romper el presupuesto de 800 ms en frío
        max-attempts: 1
        wait-duration: 0ms
  circuitbreaker:
    instances:
      provider:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3